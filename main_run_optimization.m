close all;
clc;
clear;
global v step
v = 3.0;
step = 0.8;
period = step/v;

ig = InitialGuess(step, false);
ig.draw();


mode1 = ocl.Stage( ...
  [], ...
  'vars', @vars, ...
  'dae', @dae, ...
  'pathcosts', @pathcosts, ...
  'gridconstraints', @gridconstraints1, ...
  'N', 8, 'd', 3);
mode2 = ocl.Stage( ...
  [], ...
  'vars', @vars, ...
  'dae', @dae, ...
  'pathcosts', @pathcosts, ...
  'gridconstraints', @gridconstraints2, ...
  'N', 4, 'd', 3);
mode3 = ocl.Stage( ...
  [], ...
  'vars', @vars, ...
  'dae', @dae, ...
  'pathcosts', @pathcosts, ...
  'gridconstraints', @gridconstraints3, ...
  'N', 2, 'd', 3);


mode1.setInitialStateBounds('time', 0);
mode1.setEndStateBounds('time', period*0.5, period*0.8);
mode2.setInitialStateBounds('time', period*0.5, period*0.8);
mode2.setEndStateBounds('time', period*0.7, period*0.9);
mode3.setInitialStateBounds('time', period*0.7, period*0.9);
mode3.setEndStateBounds('time', period*0.9, period*1.1);

ig.set_initial_guess(mode1, mode2, mode3, period);

ocp = ocl.MultiStageProblem({mode1,mode2,mode3}, ...
                            {@trans_stand2float,@trans_float2stand});


[sol,times] = ocp.solve();

result = output.Result(sol, times);
% save results to file
[~,~]=mkdir('+results');
filename = [datestr(now,'yyyy-mm-dd_HH-MM-SS') '.mat'];
save(['+results/' filename],'sol','times','result');                          
    
